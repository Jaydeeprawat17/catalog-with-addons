datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ProductType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String
  description   String?
  productType   ProductType      @relation(fields: [productTypeId], references: [id])
  productTypeId Int
  images        ProductImage[]
  options       ProductOption[]
  variants      ProductVariant[]
  addOns        AddOn[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  alt       String?
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model ProductOption {
  id        Int                  @id @default(autoincrement())
  product   Product              @relation(fields: [productId], references: [id])
  productId Int
  name      String // e.g., "Size" or "Color"
  values    ProductOptionValue[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@unique([productId, name])
}

model ProductVariant {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  sku         String   @unique
  price       Float
  stock       Int      @default(0)
  // optional top-level name for variant (e.g., "M / Blue") to help display
  displayName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relation to map which option-values this variant uses:
  optionValues ProductVariantOptionValue[]
}

model ProductOptionValue {
  id            Int                         @id @default(autoincrement())
  value         String
  option        ProductOption               @relation(fields: [optionId], references: [id])
  optionId      Int
  variantValues ProductVariantOptionValue[] // <-- Opposite side added
}

model ProductVariantOptionValue {
  id            Int                @id @default(autoincrement())
  variant       ProductVariant     @relation(fields: [variantId], references: [id])
  variantId     Int
  optionValue   ProductOptionValue @relation(fields: [optionValueId], references: [id])
  optionValueId Int
}

model AddOn {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  name        String
  price       Float
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
